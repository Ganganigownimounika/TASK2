module traffic_light_fsm (
    input clk,
    input reset,
    output reg [1:0] light // 00: Red, 01: Green, 10: Yellow
);

    typedef enum reg [1:0] {RED=2'b00, GREEN=2'b01, YELLOW=2'b10} state_t;
    state_t state, next_state;

    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= RED;
        else
            state <= next_state;
    end

    always @(*) begin
        case (state)
            RED: next_state = GREEN;
            GREEN: next_state = YELLOW;
            YELLOW: next_state = RED;
            default: next_state = RED;
        endcase
Verilog Testbench Code
module tb_traffic_light_fsm;
    reg clk;
    reg reset;
    wire [1:0] light;

    traffic_light_fsm uut (
        .clk(clk),
        .reset(reset),
        .light(light)
    );

    initial begin
        // Initialize inputs
        clk = 0;
        reset = 1;

        // Apply reset
        #5 reset = 0;
        
        // Wait and observe the FSM transitions
        #100 $finish;
    end

    always #5 clk = ~clk; // Generate clock signal

    initial begin
        $monitor("Time = %0t, Light = %b", $time, light);
    end
endmodule

    
